#!/bin/bash
#
# This is setup to run a separate standalone script. It may be beneficial for
# server build to not make the main script vagrant-specific. It may also be
# useful to give developers local development options.

# Uncomment the following to output some debugging information.
# echo Running: $BASH_SOURCE
# set | egrep GIT
# echo PWD is $PWD

# May be "vagrant" or "local" as the environment to run the phpcbf validation.
WHERE_TO_RUN="lando"

# Set directory variables.
if [ -d "/vagrant" ]; then
  ENV_DIR=/vagrant/wwvs_env
else
  ENV_DIR=$(dirname $PWD)/wwvs_env
fi
CMS_DIR=$PWD
CMS_DIR_VM=/opt/development/wwvs_cms

# Set exit code variable to success by default.
EXIT_CODE=0

if [ "$WHERE_TO_RUN" == vagrant ]; then

  # Run phpcbf_validate in the vagrant VM.
  echo "Executing vagrant ssh -c to run phpcbf_validate in the VM."
  cd ${ENV_DIR}
  # @TODO: Eventually, this should run a script outside the .git/hooks directory
  # so that we can easily update and improve upon the phpcbf_validate script.
  # During testing, we'll copy everything to .git/hooks.
  if [ -d "/vagrant" ]; then
    cd ${CMS_DIR_VM}; ./scripts/git_hooks/phpcbf_run
  else
    vagrant ssh -c "cd ${CMS_DIR_VM}; ./scripts/git_hooks/phpcbf_run"
  fi

  if [ $? -ne 0 ]; then
    echo -e "\033[0;32mCode cleaned. Please re-commit.\033[0m\n"
    EXIT_CODE=1
  else
    echo -e "\033[0;32mNo cleanup needed.\033[0m\n"
    EXIT_CODE=1
  fi

elif [ "$WHERE_TO_RUN" == local ]; then

  # This could be used to run phpcbf_validate locally instead of in the vagrant.
  echo "This would run phpcbf_validate locally. Not currently available."
  EXIT_CODE=1

fi

exit $EXIT_CODE
