#!/usr/bin/php
<?php

/**
 * @file
 * A Git pre-commit hook script to check files for PHP syntax errors and Drupal
 * coding standards violations. Requires phpcbf and Coder Sniffer:
 *
 * @see https://drupal.org/node/1419988
 */

$return_back = '../../';
// Building an array of ignored files and folders.
$file_path = __DIR__ . '/' . $return_back . '.phpcbf_ignore';
$ignore = array();
if (file_exists($file_path)) {
  $file = fopen($file_path, "r");
  if ($file) {
    while (!feof($file)) {
      $ignore[] = fgets($file);
    }
  }
}
// The number of ignored items.
$ignored_items_count = count($ignore);

// Extensions of files to test with DrupalPractice phpcbf standard.
$file_exts_phpcbf_practice = array(
  'engine',
  'php',
  'module',
  'inc',
  'install',
  'profile',
  'test',
  'theme',
);

// Extensions of files to test.
$file_exts = array_merge($file_exts_phpcbf_practice, array(
  'js',
  'css',
  'info',
  'txt',
  'md',
));

$exit_code = 0;
$files = array();
$return = 0;

// Output some debugging information.
exec('phpcbf --version', $output);
echo implode("\n", $output), "\n";

//print "\nPrecommit\n\n";

// Identify changed files.
exec("git diff --cached --name-only --diff-filter=ACMR", $files);

// Get the number of files to process.
$num_files = count($files);
if ($num_files > 0) {
  echo "Processing $num_files files.\n\n";

  // Process each file.
  foreach ($files as $file) {

    // Check that the file exists and is not a directory.
    if (file_exists($file) && !is_dir($file)) {

      // Check files to ignore.
      if ($ignored_items_count > 0) {
        foreach ($ignore as $pattern) {
          if (function_exists('fnmatch')) {
            $pattern = trim($pattern);
            if (fnmatch($pattern, basename($file))) {
              echo "\033[0;31mIgnored by phpcbf_validate: $file (matched pattern: $pattern)\n\033[0m";
              continue 2;
            }
          }
        }
      }

      echo "\033[0;1;32mChecking file {$file}\033[0m\n";

      // Get the file extension.
      $ext = pathinfo($file, PATHINFO_EXTENSION);

      // Skip this file if it is not the file extensions array.
      if (!in_array($ext, $file_exts)) {
        continue;
      }

      $phpcbf_output = array();

      $file = escapeshellarg($file);
      // Add extra path to get warranty for run drush.
      $dir = str_replace('\'', '', dirname($file));
      $extra = '';
      if ($dir !== '.') {
        $extra = $dir . '/';
      }

      // Perform PHP syntax check (lint).
      $return = 0;
      $lint_cmd = "php -l {$file}";
      $lint_output = array();
      exec($lint_cmd, $lint_output, $return);
      if ($return !== 0) {
        // Format error messages and set exit code.
        $exit_code = 1;
      }

      // Get file name for checking.
      $filename = str_replace('\'', '', basename($file));

      // Perform phpcbf test on Drupal standard.
      echo "\033[0;32mChecking Drupal coding standards\033[0m\n";
      $return = 0;
      $phpcbf_cmd = 'cd ' . __DIR__ . '/' . $return_back . $extra . ' && bash /vagrant/phpcbf.sh Drupal ' . $filename . '&& echo "checked"';
      exec($phpcbf_cmd, $phpcbf_output, $return);
      if ($return !== 0) {
        // Format error messages and set exit code.
        echo implode("\n", $phpcbf_output), "\n";
        $exit_code = 1;
      }
      else {
        echo "\033[0;32mNothing to clean.\033[0m\n";
      }

      // Skip this file if it is not the phpcbf_practice file extensions array.
      if (!in_array($ext, $file_exts_phpcbf_practice)) {
        continue;
      }

      // Perform phpcbf test on DrupalPractice standard.
      echo "\e[0;32mChecking Drupal Best Practices\e[0m\n";
      $return = 0;
      $phpcbf_cmd = 'cd ' . __DIR__ . '/' . $return_back . $extra . ' &&  bash /vagrant/phpcbf.sh DrupalPractice ' . $filename;
      exec($phpcbf_cmd, $phpcbf_output, $return);
      if ($return !== 0) {
        // Format error messages and set exit code.
        echo implode("\n", $phpcbf_output), "\n";
        $exit_code = 1;
      }
      else {
        echo "\033[0;32mNothing to clean.\033[0m\n";
      }
    }
  }
}
else {
  echo "  There are zero files to process.\n";
}

//print "\nEnd: Precommit\n\n";

exit($exit_code);
